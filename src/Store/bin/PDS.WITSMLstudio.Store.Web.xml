<?xml version="1.0"?>
<doc>
    <assembly>
        <name>PDS.WITSMLstudio.Store.Web</name>
    </assembly>
    <members>
        <member name="T:PDS.WITSMLstudio.Store.Configuration.SecurityConfig">
            <summary>
            Configures JSON Web Token (JWT) authorization.
            </summary>
        </member>
        <member name="M:PDS.WITSMLstudio.Store.Configuration.SecurityConfig.Configuration(Owin.IAppBuilder)">
            <summary>
            Configures security for the specified application.
            </summary>
            <param name="app">The application.</param>
        </member>
        <member name="T:PDS.WITSMLstudio.Store.Configuration.WebApiConfig">
            <summary>
            Configures Web API application settings.
            </summary>
        </member>
        <member name="M:PDS.WITSMLstudio.Store.Configuration.WebApiConfig.Register(System.Web.Http.HttpConfiguration)">
            <summary>
            Registers configuration settings for the application.
            </summary>
            <param name="config">The configuration.</param>
        </member>
        <member name="T:PDS.WITSMLstudio.Store.Controllers.EtpControllerBase">
            <summary>
            Defines the Web API methods used to initiate an ETP Web Socket connection.
            </summary>
            <seealso cref="T:System.Web.Http.ApiController" />
        </member>
        <member name="M:PDS.WITSMLstudio.Store.Controllers.EtpControllerBase.#ctor(PDS.WITSMLstudio.Framework.IContainer)">
            <summary>
            Initializes a new instance of the <see cref="T:PDS.WITSMLstudio.Store.Controllers.EtpControllerBase"/> class.
            </summary>
            <param name="container">The container.</param>
        </member>
        <member name="P:PDS.WITSMLstudio.Store.Controllers.EtpControllerBase.Container">
            <summary>
            Gets the composition container.
            </summary>
            <value>The composition container.</value>
        </member>
        <member name="P:PDS.WITSMLstudio.Store.Controllers.EtpControllerBase.DataAdapters">
            <summary>
            Gets or sets the list of data adapters.
            </summary>
            <value>The list of data adapters.</value>
        </member>
        <member name="M:PDS.WITSMLstudio.Store.Controllers.EtpControllerBase.GetEtpVersions">
            <summary>
            Gets the list of supported ETP versions.
            </summary>
            <returns>A list of supported ETP versions.</returns>
        </member>
        <member name="M:PDS.WITSMLstudio.Store.Controllers.EtpControllerBase.ServerCapabilities">
            <summary>
            Gets the server's capabilities.
            </summary>
            <returns>A <see cref="M:PDS.WITSMLstudio.Store.Controllers.EtpControllerBase.ServerCapabilities"/> object.</returns>
        </member>
        <member name="M:PDS.WITSMLstudio.Store.Controllers.EtpControllerBase.ClientList">
            <summary>
            Get the list of client Web Socket connections.
            </summary>
            <returns>An <see cref="T:System.Web.Http.IHttpActionResult"/> containing the list of clients.</returns>
        </member>
        <member name="M:PDS.WITSMLstudio.Store.Controllers.EtpControllerBase.UpgradeRequest">
            <summary>
            Upgrades the HTTP request to a Web Socket request.
            </summary>
            <returns>An <see cref="T:System.Net.Http.HttpResponseMessage"/> with the appropriate status code.</returns>
        </member>
        <member name="M:PDS.WITSMLstudio.Store.Controllers.EtpControllerBase.CreateWebSocketOptions(System.Collections.Generic.IList{System.String})">
            <summary>
            Creates the web socket options for the requested protocols.
            </summary>
            <param name="requestedProtocols">The requested protocols.</param>
            <returns>A new <see cref="T:System.Web.WebSockets.AspNetWebSocketOptions"/> instance.</returns>
        </member>
        <member name="M:PDS.WITSMLstudio.Store.Controllers.EtpControllerBase.GetRequestedEtpSubProtocol(System.Collections.Specialized.NameValueCollection)">
            <summary>
            Gets the requested ETP sub protocol.
            </summary>
            <param name="parameters">The query string parameters.</param>
            <returns>The requested ETP sub protocol.</returns>
        </member>
        <member name="M:PDS.WITSMLstudio.Store.Controllers.EtpControllerBase.AcceptWebSocketRequest(System.Web.WebSockets.AspNetWebSocketContext)">
            <summary>
            Accepts the web socket request.
            </summary>
            <param name="context">The context.</param>
            <returns>An awaitable <see cref="T:System.Threading.Tasks.Task"/>.</returns>
        </member>
        <member name="M:PDS.WITSMLstudio.Store.Controllers.EtpControllerBase.CreateEtpServer(System.Net.WebSockets.WebSocket,System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>
            Creates the ETP server handler.
            </summary>
            <param name="socket">The WebSocket.</param>
            <param name="headers">The headers.</param>
            <returns></returns>
        </member>
        <member name="M:PDS.WITSMLstudio.Store.Controllers.EtpControllerBase.RegisterProtocolHandlers(Energistics.Etp.Common.IEtpServer)">
            <summary>
            Registers the protocol handlers supported by the specified <see cref="T:Energistics.Etp.Common.IEtpServer" />.
            </summary>
            <param name="etpServer">The ETP server.</param>
        </member>
        <member name="M:PDS.WITSMLstudio.Store.Controllers.EtpControllerBase.UpdateHandshakeResponse(System.Net.Http.HttpResponseMessage)">
            <summary>
            Updates the WebSocket handshake response.
            </summary>
            <param name="response">The response.</param>
        </member>
        <member name="T:PDS.WITSMLstudio.Store.Security.EtpAuthenticationModule">
            <summary>
            Provides Basic and JSON Web Token (JWT) authentication for ETP.
            </summary>
            <seealso cref="T:PDS.WITSMLstudio.Framework.Web.Security.BasicAuthenticationModule" />
        </member>
        <member name="M:PDS.WITSMLstudio.Store.Security.EtpAuthenticationModule.#cctor">
            <summary>
            Initializes the <see cref="T:PDS.WITSMLstudio.Store.Security.EtpAuthenticationModule"/> class.
            </summary>
        </member>
        <member name="M:PDS.WITSMLstudio.Store.Security.EtpAuthenticationModule.VerifyBearerAuthentication(System.String)">
            <summary>
            Verifies the Bearer authentication token.
            </summary>
            <param name="parameter">The parameter.</param>
        </member>
        <member name="M:PDS.WITSMLstudio.Store.Security.EtpAuthenticationModule.ValidateJsonWebToken(System.String)">
            <summary>
            Validates the JSON Web Token (JWT).
            </summary>
            <param name="encryptedToken">The encrypted token.</param>
        </member>
        <member name="T:PDS.WITSMLstudio.Store.Security.EtpAuthorizationServerProvider">
            <summary>
            Provides JSON Web Token (JWT) authorization services using an ASP.NET membership provider for authentication.
            </summary>
            <seealso cref="T:Microsoft.Owin.Security.OAuth.OAuthAuthorizationServerProvider" />
        </member>
        <member name="M:PDS.WITSMLstudio.Store.Security.EtpAuthorizationServerProvider.ValidateClientAuthentication(Microsoft.Owin.Security.OAuth.OAuthValidateClientAuthenticationContext)">
            <summary>
            Called to validate that the origin of the request is a registered "client_id", and that the correct credentials for that client are
            present on the request. If the web application accepts Basic authentication credentials,
            context.TryGetBasicCredentials(out clientId, out clientSecret) may be called to acquire those values if present in the request header. If the web
            application accepts "client_id" and "client_secret" as form encoded POST parameters,
            context.TryGetFormCredentials(out clientId, out clientSecret) may be called to acquire those values if present in the request body.
            If context.Validated is not called the request will not proceed further.
            </summary>
            <param name="context">The context of the event carries information in and results out.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> to enable asynchronous execution.</returns>
        </member>
        <member name="M:PDS.WITSMLstudio.Store.Security.EtpAuthorizationServerProvider.GrantResourceOwnerCredentials(Microsoft.Owin.Security.OAuth.OAuthGrantResourceOwnerCredentialsContext)">
            <summary>
            Called when a request to the Token endpoint arrives with a "grant_type" of "password". This occurs when the user has provided name and password
            credentials directly into the client application's user interface, and the client application is using those to acquire an "access_token" and
            optional "refresh_token". If the web application supports the
            resource owner credentials grant type it must validate the context.Username and context.Password as appropriate. To issue an
            access token the context.Validated must be called with a new ticket containing the claims about the resource owner which should be associated
            with the access token. The application should take appropriate measures to ensure that the endpoint isnâ€™t abused by malicious callers.
            The default behavior is to reject this grant type.
            See also http://tools.ietf.org/html/rfc6749#section-4.3.2
            </summary>
            <param name="context">The context of the event carries information in and results out.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> to enable asynchronous execution.</returns>
        </member>
        <member name="T:PDS.WITSMLstudio.Store.Security.EtpJwtFormat">
            <summary>
            Defines the JSON Web Token (JWT) format used for ETP.
            </summary>
            <seealso cref="T:Microsoft.Owin.Security.ISecureDataFormat`1" />
        </member>
        <member name="M:PDS.WITSMLstudio.Store.Security.EtpJwtFormat.#ctor(System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:PDS.WITSMLstudio.Store.Security.EtpJwtFormat"/> class.
            </summary>
            <param name="issuer">The issuer.</param>
            <param name="audience">The audience.</param>
            <param name="secret">The secret.</param>
        </member>
        <member name="M:PDS.WITSMLstudio.Store.Security.EtpJwtFormat.Protect(Microsoft.Owin.Security.AuthenticationTicket)">
            <summary>
            Encrypts the authentication data in JSON Web Token format.
            </summary>
            <param name="data">The token data.</param>
            <returns>The formatted JSON Web Token.</returns>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="M:PDS.WITSMLstudio.Store.Security.EtpJwtFormat.Unprotect(System.String)">
            <summary>
            Decrypts the specified authentication token.
            </summary>
            <param name="protectedText">The protected token.</param>
            <returns>An <see cref="T:Microsoft.Owin.Security.AuthenticationTicket"/> containing authentication data.</returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
    </members>
</doc>
